{"version":3,"file":"static/js/329.78fc13f2.chunk.js","mappings":"oPAuFA,UA9EkB,WAChB,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MAEd,OAAQD,GACN,IAAK,YACHN,EAASO,GACT,MACF,IAAK,eACHL,EAAYK,GACZ,MACF,QACEC,IAEL,EAEKC,GAAWC,EAAAA,EAAAA,MACTC,GAAcC,EAAAA,EAAAA,IAAYC,EAAAA,GAA1BF,UAQFH,EAAQ,WACZR,EAAS,IACTE,EAAY,GACb,EAEKY,GAAUC,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAClCC,GAAaF,EAAAA,EAAAA,UAAQ,kBAAMC,EAAAA,EAAAA,KAAN,GAAgB,IAE3C,OACE,iBAAKE,UAAWC,EAAAA,EAAAA,QAAhB,WACE,eAAID,UAAWC,EAAAA,EAAAA,MAAf,oBACA,kBAAMC,SAjBW,SAAAhB,GACnBA,EAAEiB,iBAEFZ,GAASa,EAAAA,EAAAA,IAAU,CAAEvB,MAAOA,EAAOE,SAAUA,IAC9C,EAaiCiB,UAAWK,EAAAA,EAAAA,KAAzC,WACE,kBAAOL,UAAWK,EAAAA,EAAAA,MAAcC,QAASV,EAAzC,oBAGA,kBACEW,GAAIX,EACJY,KAAK,QACLpB,KAAK,YACLC,MAAOR,EACP4B,SAAUxB,EACVyB,UAAQ,EACRC,YAAY,kBACZX,UAAWK,EAAAA,EAAAA,aAEb,kBAAOL,UAAWK,EAAAA,EAAAA,MAAcC,QAASP,EAAzC,uBAGA,kBACEQ,GAAIR,EACJS,KAAK,WACLpB,KAAK,eACLC,MAAON,EACP0B,SAAUxB,EACVyB,UAAQ,EACRC,YAAY,qBACZX,UAAWK,EAAAA,EAAAA,YAEXZ,GAKA,SAAC,IAAD,KAJA,mBAAQe,KAAK,SAASR,UAAWK,EAAAA,EAAAA,QAAjC,yBAST,C,qBCpFD,KAAgB,KAAO,0BAA0B,MAAQ,2BAA2B,UAAY,+BAA+B,QAAU,6B,qBCAzI,KAAgB,QAAU,2BAA2B,MAAQ,yBAAyB,cAAgB,iC,wDCAtG,IAkBIP,EAAS,WAGX,IAH0B,IAAdc,EAAc,uDAAP,GACfL,EAAK,GACLM,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfL,GADEU,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAET,CACD,OAAOV,CACR,C","sources":["pages/LoginForm/loginForm.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","webpack://react-homework-template/./src/pages/Phonebook/Phonebook.module.css?1c37","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { getAuth } from 'redux/mySlice/authSlice';\nimport { loginUser } from 'redux/authOperations';\nimport styles from '../../components/ContactForm/ContactForm.module.css';\nimport s from '../Phonebook/Phonebook.module.css';\nimport { Loader } from '../../components/Loader/Loader';\n\nconst LoginForm = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'userEmail':\n        setEmail(value);\n        break;\n      case 'userPassword':\n        setPassword(value);\n        break;\n      default:\n        reset();\n    }\n  };\n\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector(getAuth);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(loginUser({ email: email, password: password }));\n  };\n\n  const reset = () => {\n    setEmail('');\n    setPassword('');\n  };\n\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n\n  return (\n    <div className={s.wrapper}>\n      <h1 className={s.title}>Login</h1>\n      <form onSubmit={handleSubmit} className={styles.form}>\n        <label className={styles.label} htmlFor={emailId}>\n          Email\n        </label>\n        <input\n          id={emailId}\n          type=\"email\"\n          name=\"userEmail\"\n          value={email}\n          onChange={handleChange}\n          required\n          placeholder=\"jane@sample.com\"\n          className={styles.inputForm}\n        />\n        <label className={styles.label} htmlFor={passwordId}>\n          Password\n        </label>\n        <input\n          id={passwordId}\n          type=\"password\"\n          name=\"userPassword\"\n          value={password}\n          onChange={handleChange}\n          required\n          placeholder=\"Type your password\"\n          className={styles.inputForm}\n        />\n        {!isLoading ? (\n          <button type=\"submit\" className={styles.btnForm}>\n            Log In\n          </button>\n        ) : (\n          <Loader />\n        )}\n      </form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"inputForm\":\"ContactForm_inputForm__4bzZs\",\"btnForm\":\"ContactForm_btnForm__cx8-v\"};","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"Phonebook_wrapper__jqMf7\",\"title\":\"Phonebook_title__8U+0x\",\"titleContacts\":\"Phonebook_titleContacts__FFd2t\"};","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["useState","email","setEmail","password","setPassword","handleChange","e","target","name","value","reset","dispatch","useDispatch","isLoading","useSelector","getAuth","emailId","useMemo","nanoid","passwordId","className","s","onSubmit","preventDefault","loginUser","styles","htmlFor","id","type","onChange","required","placeholder","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}