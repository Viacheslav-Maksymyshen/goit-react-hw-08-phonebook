{"version":3,"file":"static/js/218.5243e597.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.js","pages/RegisterForm/RegistrForm.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"label\":\"ContactForm_label__-cVXI\",\"inputForm\":\"ContactForm_inputForm__4bzZs\",\"btnForm\":\"ContactForm_btnForm__cx8-v\"};","import { useState } from 'react';\n\nimport styles from './ContactForm.module.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from '../../redux/mySlice/myPhoneBookSlice';\nimport { addContact } from '../../redux/contaktsOperation';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const { contacts, isLoading } = useSelector(getContacts);\n\n  const repeatName = newName => {\n    return contacts.find(\n      contact => contact.name.toLowerCase() === newName.toLowerCase()\n    );\n  };\n\n  const formSubmitHandler = (name, number) => {\n    if (repeatName(name)) {\n      return alert(`${name} is already in contacts`);\n    }\n    dispatch(addContact({ name, number }));\n    reset();\n  };\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    formSubmitHandler(name, number);\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.label}>\n        Name\n        <input\n          className={styles.inputForm}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n      </label>\n      <label className={styles.label}>\n        Number\n        <input\n          className={styles.inputForm}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n      </label>\n      <button className={styles.btnForm} type=\"submit\">\n        {isLoading ? 'Loading...' : 'Add contact'}\n      </button>\n    </form>\n  );\n}\n","import { useState, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport { getAuth } from 'redux/mySlice/authSlice';\nimport { registerUser } from 'redux/authOperations';\n\nimport css from '../../components/ContactForm';\nimport { Loader } from '../../components/Loader/Loader';\n\nconst RegisterForm = () => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'userName':\n        setName(value);\n        break;\n      case 'userEmail':\n        setEmail(value);\n        break;\n      case 'userPassword':\n        setPassword(value);\n        break;\n      default:\n        setName('');\n        setEmail('');\n        setPassword('');\n    }\n  };\n\n  const dispatch = useDispatch();\n  const { isLoading } = useSelector(getAuth);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    dispatch(registerUser({ name: name, email: email, password: password }));\n\n    setName('');\n    setEmail('');\n    setPassword('');\n  };\n\n  const nameId = useMemo(() => nanoid(), []);\n  const emailId = useMemo(() => nanoid(), []);\n  const passwordId = useMemo(() => nanoid(), []);\n\n  return (\n    <form onSubmit={handleSubmit} className={css.insertWrapper}>\n      <label className={css.label} htmlFor={nameId}>\n        Name\n      </label>\n      <input\n        id={nameId}\n        type=\"text\"\n        name=\"userName\"\n        value={name}\n        onChange={handleChange}\n        required\n        placeholder=\"User_Name\"\n        className={css.input}\n      />\n      <label className={css.label} htmlFor={emailId}>\n        Email\n      </label>\n      <input\n        id={emailId}\n        type=\"email\"\n        name=\"userEmail\"\n        value={email}\n        onChange={handleChange}\n        required\n        placeholder=\"your_email@mail.com\"\n        className={css.input}\n      />\n      <label className={css.label} htmlFor={passwordId}>\n        Password\n      </label>\n      <input\n        id={passwordId}\n        type=\"password\"\n        name=\"userPassword\"\n        value={password}\n        onChange={handleChange}\n        required\n        placeholder=\"min 7 symbols\"\n        className={css.input}\n      />\n      {!isLoading ? (\n        <button type=\"submit\" className={css.button}>\n          Sign Up\n        </button>\n      ) : (\n        <Loader />\n      )}\n    </form>\n  );\n};\n\nexport default RegisterForm;\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"],"names":["ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","getContacts","contacts","isLoading","formSubmitHandler","newName","find","contact","toLowerCase","alert","addContact","reset","handleChange","e","currentTarget","value","className","styles","onSubmit","preventDefault","type","onChange","pattern","title","required","email","setEmail","password","setPassword","target","getAuth","nameId","useMemo","nanoid","emailId","passwordId","registerUser","css","htmlFor","id","placeholder","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}